using Nucleus.Base;
using Nucleus.Rendering;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Salamander.Display
{
    /// <summary>
    /// Abstract base class for display layers
    /// </summary>
    public abstract class DisplayLayerBase : NotifyPropertyChangedBase, IRenderable
    {
        /// <summary>
        /// Internal backing member for Visible
        /// </summary>
        private bool _Visible = false;

        /// <summary>
        /// Layer visibility.
        /// </summary>
        public bool Visible
        {
            get { return _Visible; }
            set
            {
                _Visible = value;
                NotifyPropertyChanged("Visible");
            }
        }

        /// <summary>
        /// Can this layer be toggled on and off?
        /// </summary>
        public virtual bool Toggleable { get { return true; } }

        /// <summary>
        /// Is this display layer a dynamic preview layer that should be updated during position selection events
        /// </summary>
        public bool IsDynamic { get; protected set; }

        public abstract bool Draw(RenderingParameters parameters);

        /// <summary>
        /// Shortcut method to create a new mesh-type avatar suitable for use in the host application.
        /// The mesh avatar will be generated by the current host application's AvatarFactory.
        /// </summary>
        /// <returns></returns>
        public IMeshAvatar CreateMeshAvatar()
        {
            return Core.Instance.Host.AvatarFactory.CreateMeshAvatar();
        }

        /// <summary>
        /// Shortcut method to create a new line type avatar suitable for use in the host application.
        /// The line avatar will be generated by the current host application's AvatarFactory.
        /// </summary>
        /// <returns></returns>
        public ILineAvatar CreateLineAvatar()
        {
            return Core.Instance.Host.AvatarFactory.CreateLineAvatar();
        }

    }
}
